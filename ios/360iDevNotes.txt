1. So, have you used Core Data?

* Good/Bad experience?
* Go to method for data persistence?
* Stories?

(Gauge audience usage and like factor)

2. What was the iOS SDK like before?

* REST-based, requiring developers to have a basic understanding of REST 
  and the http protocol
* Exposing a layer that should be abstracted out

3. NSIncrementalStore

* NSIncrementalStore is an abstract superclass defining the API through which Core Data 
communicates with a store. 

This interface is designed to allow you to create persistent stores which 
load and save data incrementally, allowing for the management of 
large and/or shared datasets.

* Not crazy hard to understand... have to get over the "gotchas" - 
	Core Data decides when your overridden methods are called.
	
	Various places when the return value is very important - could be the difference
	between a save success and failure.

* Atomic Store: An incremental store is a Core Data store that allows you piecemeal 
access to its content. 

This means that you can bring into memory just the data your program needs to operate, 
rather than the entire contents of the store. 
An incremental store is therefore much more efficient than an atomic store which must 
bring all the data into memory.

* important for mobile applications to be able to persist incrementally because of 
network bandwidth, etc.

* allows for offline solution to queue up changes and persist when network is available.

4. Methods to override

	a. loadMetadata: where we keep details of the Store, including the URL 
	needed to access to API if needed.

* There is no need to override the methods that you must otherwise 
override for a subclass of NSPersistentStore.

5. Details of implementation

6. Offline sync:

	Tom Harrington's talk - want to use a lot of what he was talking about...
	
	multiple contexts... background syncing while paying attention to thread safety.


* add slide for addPersistentStoreWithType:config:url
* add return types for implementation

